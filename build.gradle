plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.6'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id 'jacoco'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '11'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'
	developmentOnly("org.springframework.boot:spring-boot-devtools")
	// Swagger
	implementation 'io.springfox:springfox-boot-starter:3.0.0'
	implementation 'io.springfox:springfox-swagger-ui:3.0.0'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.1.RELEASE'

	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	implementation 'org.springframework.security:spring-security-oauth2-client:5.7.5'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	runtimeOnly 'com.mysql:mysql-connector-j'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.mockito:mockito-core:4.8.0'
	implementation group: 'org.kurento', name: 'kurento-client', version: '6.18.0'

	implementation group: 'org.kurento', name: 'kurento-utils-js', version: '6.18.0'

	// WebSocket
	implementation 'org.springframework.boot:spring-boot-starter-websocket'

	// sockjs
	implementation 'org.webjars:sockjs-client:1.5.1'
	// stomp
	implementation 'org.webjars:stomp-websocket:2.3.4'

	//redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	// gson
	implementation 'com.google.code.gson:gson:2.9.0'

}

tasks.named('test') {
	useJUnitPlatform()
}
tasks.register('applicationCodeCoverageReport', JacocoReport) {
	executionData run
	sourceSets sourceSets.main
}
jacocoTestReport {
	dependsOn test // tests are required to run before generating the report
	reports {
		xml.required = false
		csv.required = false
		html.outputLocation = layout.buildDirectory.dir('jacocoHtml')

		// 리포트의 저장 경로를 설정합니다.
		html.destination file("jacoco/jacocoHtml")
		xml.destination file("jacoco/jacoco.xml")
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"com/example/VideoChatting/dto/*",
					"com/example/VideoChatting/entity/*",
					'!com/example/VideoChatting/entity/ChatUser.class',
					"**/config/*",
					"**/exception/*",
					"**/oAuth/*",
					"**/KurentoHandler.class",
					"**/KurentoUserSession.class/**",
			])
		}))
	}

}
jacocoTestCoverageVerification {

	violationRules { // 커버리지의 범위와 퍼센테이지를 설정합니다.
		rule {
			element = 'CLASS'

			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.50
			}
		}
	}
}